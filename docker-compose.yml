version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: prestasi-siswa-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/traefik.yml"
      - "--entrypoints.web.address=:80"
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--log.level=DEBUG"
    ports:
      - "${TRAEFIK_PORT:-80}:80"
      - "${TRAEFIK_DASHBOARD_PORT:-8080}:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik.yml:/etc/traefik/traefik.yml:ro
    networks:
      - prestasi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=web"

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/prestasi_siswa
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - db
      - redis
    volumes:
      - ./backend:/app
    networks:
      - prestasi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.services.backend.loadbalancer.sticky=true"
      - "traefik.http.services.backend.loadbalancer.sticky.cookie.name=backend_sticky"

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - prestasi-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=prestasi_siswa
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    networks:
      - prestasi-network

  redis:
    image: redis:7.2.3-alpine
    command: redis-server --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - prestasi-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - prestasi-network

  # jmeter:
  #   image: justb4/jmeter:5.5
  #   volumes:
  #     - ./jmeter/test-plans:/test-plans
  #     - ./jmeter/results:/results
  #   networks:
  #     - prestasi-network
  #   command: >
  #     -n -t /test-plans/cache-implementation/phase3_high_load.jmx
  #     -l /results/cache-implementation/single_prediction/phase3_high_load_results.jtl
  #     -e -o /results/cache-implementation/single_prediction/phase3_high_load_dashboard

volumes:
  postgres_data:
  redis_data:

networks:
  prestasi-network:
    driver: bridge

