sequenceDiagram
    participant U as User
    participant F as Frontend (Kendo Grid)
    participant A as Backend API
    participant D as Database
    participant S as Siswa Table
    participant N as NilaiRaport Table

    Note over U,N: Sequence Diagram - Manajemen Nilai Raport Siswa

    %% Create Nilai
    rect rgb(240, 248, 255)
        Note over U,N: 1. CREATE NILAI (Tambah Data Baru)
        
        U->>F: Click "Add New" button
        F->>U: Show form popup with defaults:<br/>semester="Ganjil", tahun_ajaran="2024/2025"
        U->>F: Fill form data:<br/>- siswa_id (dropdown)<br/>- semester, tahun_ajaran<br/>- 11 mata pelajaran values<br/>(matematika, bahasa_indonesia, bahasa_inggris,<br/>bahasa_jawa, ipa, agama, pjok, pkn,<br/>sejarah, seni, dasar_kejuruan)
        
        Note over F: Auto-Calculate on Form (Real-time)
        F->>F: Calculate rata_rata = (sum of 11 subjects) / 11
        F->>F: Update form display real-time
        F->>F: Validate all subjects (0-100 range)
        
        U->>F: Click "Save" button
        
        F->>A: POST /api/nilai/<br/>Bearer Token + Data
        
        Note over A: Authentication Check
        A->>A: Validate Bearer Token<br/>Extract current_user
        
        Note over A: Student Validation
        A->>S: SELECT * FROM siswa WHERE id = siswa_id
        S-->>A: Return siswa data or null
        
        alt Siswa tidak ditemukan
            A-->>F: HTTP 404<br/>"Siswa dengan ID tidak ditemukan"
            F-->>U: Show error notification
        else Siswa valid
            Note over A: Duplicate Check (Semester & Tahun)
            A->>N: SELECT * FROM nilai_raport<br/>WHERE siswa_id = ? AND semester = ?<br/>AND tahun_ajaran = ?
            N-->>A: Return existing data or null
            
            alt Data nilai sudah ada
                A-->>F: HTTP 400<br/>"Nilai untuk siswa pada semester ini sudah ada"
                F-->>U: Show error notification
            else Data belum ada
                Note over A: Business Logic Calculation
                A->>A: Extract 11 subject values from request
                A->>A: Calculate rata_rata = (matematika + bahasa_indonesia +<br/>bahasa_inggris + bahasa_jawa + ipa + agama +<br/>pjok + pkn + sejarah + seni + dasar_kejuruan) / 11
                A->>A: Validate all subjects (0-100 range)
                
                Note over A: Data Persistence
                A->>N: INSERT INTO nilai_raport<br/>(siswa_id, semester, tahun_ajaran,<br/>matematika, bahasa_indonesia, bahasa_inggris,<br/>bahasa_jawa, ipa, agama, pjok, pkn,<br/>sejarah, seni, dasar_kejuruan, rata_rata)
                N-->>A: Return new record with ID
                
                A-->>F: HTTP 201 - Created with calculated data
                F->>F: Refresh grid data
                F-->>U: Show success notification
            end
        end
    end

    rect rgb(240, 255, 240)
        Note over U,N: 2. READ NILAI (Tampil Data)
        
        U->>F: Navigate to Nilai page
        F->>A: GET /api/nilai?skip=0&limit=100<br/>Bearer Token
        
        Note over A: Authentication Check
        A->>A: Validate Bearer Token<br/>Extract current_user
        
        Note over A: JOIN Query with Siswa
        A->>D: SELECT n.id, n.siswa_id, s.nama as nama_siswa,<br/>n.semester, n.tahun_ajaran,<br/>n.matematika, n.bahasa_indonesia, n.bahasa_inggris,<br/>n.ipa, n.bahasa_jawa, n.agama, n.pjok, n.pkn,<br/>n.sejarah, n.seni, n.dasar_kejuruan, n.rata_rata,<br/>n.created_at, n.updated_at<br/>FROM nilai_raport n<br/>JOIN siswa s ON n.siswa_id = s.id<br/>ORDER BY s.nama<br/>LIMIT 100 OFFSET 0
        
        D-->>A: Return joined data with siswa names
        
        Note over A: Data Transformation
        A->>A: Convert query results to JSON array<br/>Format rata_rata to 1 decimal place
        
        A-->>F: HTTP 200 - Array of nilai with nama_siswa
        
        F->>F: Populate Kendo Grid:<br/>- Configure columns with proper formatting<br/>- Set data source with pagination<br/>- Enable sorting, filtering<br/>- Hide some columns for space optimization
        
        F-->>U: Display data table with columns:<br/>Nama Siswa, Semester, Tahun Ajaran,<br/>MTK, B.IND, B.ING, IPA, RataÂ²,<br/>Actions (Edit/Delete)
    end

    rect rgb(255, 248, 220)
        Note over U,N: 3. UPDATE NILAI (Edit Data)
        
        U->>F: Click "Edit" button on grid row
        F->>A: GET /api/nilai/{id}<br/>Bearer Token
        A->>N: SELECT * FROM nilai_raport WHERE id = ?
        N-->>A: Return nilai record
        A-->>F: HTTP 200 - Nilai data for editing
        
        F->>U: Show edit form popup<br/>Pre-filled with current data
        U->>F: Modify subject values:<br/>- matematika, bahasa_indonesia<br/>- bahasa_inggris, ipa, etc.
        
        Note over F: Real-time Calculation
        F->>F: On input change:<br/>Calculate rata_rata = (sum of 11 subjects) / 11
        F->>F: Update rata_rata field immediately
        F->>F: Validate all subjects (0-100 range)
        
        U->>F: Click "Update" button
        
        F->>A: PUT /api/nilai/{id}<br/>Bearer Token + Updated Data
        
        Note over A: Authentication & Validation
        A->>A: Validate Bearer Token<br/>Extract current_user
        A->>N: SELECT * FROM nilai_raport WHERE id = ?
        N-->>A: Return existing record or null
        
        alt Record tidak ditemukan
            A-->>F: HTTP 404<br/>"Nilai tidak ditemukan"
            F-->>U: Show error notification
        else Record ditemukan
            Note over A: Business Logic for Updates
            A->>A: Check if any subject values changed
            A->>A: Get update_data with exclude_unset=True
            
            alt Subject values changed
                A->>A: Get updated values from request
                A->>A: Get existing values for unchanged fields
                A->>A: Recalculate rata_rata = (sum of all 11 subjects) / 11
                A->>A: Add rata_rata to update_data
            end
            
            A->>A: Set updated_at = current_timestamp()
            
            Note over A: Data Update
            A->>N: UPDATE nilai_raport SET<br/>matematika = ?, bahasa_indonesia = ?,<br/>bahasa_inggris = ?, bahasa_jawa = ?,<br/>ipa = ?, agama = ?, pjok = ?, pkn = ?,<br/>sejarah = ?, seni = ?, dasar_kejuruan = ?,<br/>rata_rata = ?, updated_at = ?<br/>WHERE id = ?
            N-->>A: Return updated record
            
            A-->>F: HTTP 200 - Updated nilai data
            F->>F: Refresh grid data source
            F-->>U: Show success notification
        end
    end

    rect rgb(255, 240, 240)
        Note over U,N: 4. DELETE NILAI (Hapus Data)
        
        U->>F: Click "Hapus" button on grid row
        
        Note over F: Confirmation Modal
        F->>F: Extract safe data from dataItem:<br/>- id, nama_siswa, semester, tahun_ajaran<br/>- matematika, bahasa_indonesia, bahasa_inggris<br/>- ipa, rata_rata
        
        F->>U: Show confirmation modal with details:<br/>"Apakah Anda yakin ingin menghapus nilai raport<br/>untuk [nama_siswa] semester [semester]<br/>tahun ajaran [tahun_ajaran]?<br/>Rata-rata: [rata_rata]"
        
        U->>F: Click "Ya, Hapus" confirmation
        
        F->>A: DELETE /api/nilai/{id}<br/>Bearer Token
        
        Note over A: Authentication & Validation
        A->>A: Validate Bearer Token<br/>Extract current_user
        A->>N: SELECT * FROM nilai_raport WHERE id = ?
        N-->>A: Return record or null
        
        alt Record tidak ditemukan
            A-->>F: HTTP 404<br/>"Nilai tidak ditemukan"
            F-->>U: Show error notification
        else Record ditemukan
            Note over A: Data Deletion
            A->>N: DELETE FROM nilai_raport WHERE id = ?
            N-->>A: Deletion successful
            
            A-->>F: HTTP 204 - No Content
            F->>F: Refresh grid data source
            F-->>U: Show success notification:<br/>"Data nilai raport berhasil dihapus"
        end
    end

    rect rgb(248, 255, 248)
        Note over U,N: 5. EXPORT EXCEL
        
        U->>F: Click "Export Excel" button
        F->>A: GET /api/nilai/export/excel<br/>Bearer Token
        
        Note over A: Authentication Check
        A->>A: Validate Bearer Token<br/>Extract current_user
        
        Note over A: Data Collection
        A->>D: SELECT n.id, n.siswa_id, s.nama as nama_siswa,<br/>n.semester, n.tahun_ajaran,<br/>n.matematika, n.bahasa_indonesia, n.bahasa_inggris,<br/>n.ipa, n.bahasa_jawa, n.agama, n.pjok, n.pkn,<br/>n.sejarah, n.seni, n.dasar_kejuruan, n.rata_rata,<br/>n.created_at, n.updated_at<br/>FROM nilai_raport n<br/>JOIN siswa s ON n.siswa_id = s.id<br/>ORDER BY s.nama
        
        D-->>A: Return all nilai data with siswa names
        
        Note over A: Excel Generation
        A->>A: Convert data to pandas DataFrame with columns:<br/>ID, Siswa ID, Nama Siswa, Semester, Tahun Ajaran,<br/>Matematika, Bahasa Indonesia, Bahasa Inggris, IPA,<br/>Bahasa Jawa, Agama, PJOK, PKN, Sejarah, Seni,<br/>Dasar Kejuruan, Rata-rata, Dibuat, Diperbarui
        A->>A: Create BytesIO in-memory file
        A->>A: Write DataFrame to Excel with openpyxl engine
        A->>A: Set proper headers for file download
        
        A-->>F: StreamingResponse with Excel file<br/>Content-Disposition: attachment; filename="Data_Nilai_Raport.xlsx"
        
        F->>F: Trigger browser download
        F-->>U: File downloaded successfully
    end

    rect rgb(255, 255, 240)
        Note over U,N: 6. FILTER BY SISWA (Optional Feature)
        
        U->>F: Apply siswa filter in grid
        F->>A: GET /api/nilai?siswa_id={siswa_id}<br/>Bearer Token
        
        Note over A: Authentication Check
        A->>A: Validate Bearer Token<br/>Extract current_user
        
        Note over A: Filtered Query
        A->>D: SELECT n.id, n.siswa_id, s.nama as nama_siswa,<br/>n.semester, n.tahun_ajaran,<br/>n.matematika, n.bahasa_indonesia, n.bahasa_inggris,<br/>n.ipa, n.bahasa_jawa, n.agama, n.pjok, n.pkn,<br/>n.sejarah, n.seni, n.dasar_kejuruan, n.rata_rata,<br/>n.created_at, n.updated_at<br/>FROM nilai_raport n<br/>JOIN siswa s ON n.siswa_id = s.id<br/>WHERE n.siswa_id = {siswa_id}<br/>ORDER BY n.semester, n.tahun_ajaran
        
        D-->>A: Return filtered nilai data
        
        A-->>F: HTTP 200 - Filtered array of nilai
        F->>F: Update grid with filtered data
        F-->>U: Display filtered results with indicator
    end 