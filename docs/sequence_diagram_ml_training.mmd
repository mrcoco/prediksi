sequenceDiagram
    participant User as 👤 User
    participant Frontend as 🖥️ Frontend
    participant AuthMiddleware as 🔐 Auth Middleware
    participant PrediksiController as 🎯 Prediksi Controller
    participant AuthService as 🔑 Auth Service
    participant Database as 💾 Database
    participant C45Model as 🧠 C4.5 Model
    participant SiswaRepository as 👨‍🎓 Siswa Repository
    participant NilaiRepository as 📊 Nilai Repository
    participant PresensiRepository as 📅 Presensi Repository
    participant PenghasilanRepository as 💰 Penghasilan Repository

    %% Authentication & Request Initiation
    Note over User, Database: 🔐 Authentication & Model Training Request
    User->>Frontend: 1. Request Model Training
    Frontend->>AuthMiddleware: 2. POST /api/prediksi/train
    AuthMiddleware->>AuthService: 3. Validate Bearer Token
    AuthService->>Database: 4. Verify User Session
    Database-->>AuthService: 5. Session Valid
    AuthService-->>AuthMiddleware: 6. User Authenticated
    AuthMiddleware->>PrediksiController: 7. Route to train_model()

    %% Authorization Check
    Note over PrediksiController, Database: 👥 Authorization & Permission Check
    PrediksiController->>AuthService: 8. Check User Permissions
    AuthService->>Database: 9. Verify Admin/Guru Role
    Database-->>AuthService: 10. Permission Granted
    AuthService-->>PrediksiController: 11. Authorization Success

    %% Data Collection Phase
    Note over PrediksiController, Database: 📊 Training Data Collection
    
    %% Collect Siswa Data
    PrediksiController->>SiswaRepository: 12. Get All Students
    SiswaRepository->>Database: 13. SELECT * FROM siswa
    Database-->>SiswaRepository: 14. Students Data
    SiswaRepository-->>PrediksiController: 15. Student Records

    %% Collect Nilai Data
    PrediksiController->>NilaiRepository: 16. Get All Nilai Raport
    NilaiRepository->>Database: 17. SELECT * FROM nilai_raport
    Database-->>NilaiRepository: 18. Academic Scores
    NilaiRepository-->>PrediksiController: 19. Nilai Records

    %% Collect Presensi Data
    PrediksiController->>PresensiRepository: 20. Get All Presensi
    PresensiRepository->>Database: 21. SELECT * FROM presensi
    Database-->>PresensiRepository: 22. Attendance Data
    PresensiRepository-->>PrediksiController: 23. Presensi Records

    %% Collect Penghasilan Data
    PrediksiController->>PenghasilanRepository: 24. Get All Penghasilan
    PenghasilanRepository->>Database: 25. SELECT * FROM penghasilan_ortu
    Database-->>PenghasilanRepository: 26. Income Data
    PenghasilanRepository-->>PrediksiController: 27. Penghasilan Records

    %% Data Validation
    Note over PrediksiController, C45Model: 🔍 Data Validation & Preparation
    PrediksiController->>C45Model: 28. Prepare Training Data
    C45Model->>C45Model: 29. Validate Data Completeness
    C45Model->>C45Model: 30. Check Minimum Sample Size (30+)

    alt Insufficient Training Data
        C45Model-->>PrediksiController: Data berlabel tidak cukup
        PrediksiController-->>Frontend: 400 Bad Request
        Frontend-->>User: Insufficient Training Data
    end

    %% Feature Engineering
    Note over C45Model: 🔧 Feature Engineering Process
    C45Model->>C45Model: 31. Extract Features
    Note over C45Model: Features:<br/>• rata_rata (numerical)<br/>• kategori_penghasilan (categorical)<br/>• kategori_kehadiran (categorical)
    C45Model->>C45Model: 32. Prepare Target Variable (prestasi)
    C45Model->>C45Model: 33. Split Training/Validation Data

    %% C4.5 Algorithm Implementation
    Note over C45Model: 🧠 C4.5 Decision Tree Training
    C45Model->>C45Model: 34. Calculate Entropy for Dataset
    Note over C45Model: Entropy(S) = -Σ(pi * log2(pi))
    
    C45Model->>C45Model: 35. Calculate Information Gain for Each Feature
    Note over C45Model: Gain(S,A) = Entropy(S) - Σ(|Sv|/|S| * Entropy(Sv))
    
    C45Model->>C45Model: 36. Calculate Split Information
    Note over C45Model: SplitInfo(S,A) = -Σ(|Sv|/|S| * log2(|Sv|/|S|))
    
    C45Model->>C45Model: 37. Calculate Gain Ratio
    Note over C45Model: GainRatio(S,A) = Gain(S,A) / SplitInfo(S,A)
    
    C45Model->>C45Model: 38. Select Best Attribute (Highest Gain Ratio)
    C45Model->>C45Model: 39. Build Decision Tree Recursively
    C45Model->>C45Model: 40. Apply Pruning to Avoid Overfitting

    %% Model Validation
    Note over C45Model, Database: 📈 Model Validation & Performance
    C45Model->>C45Model: 41. Test Model on Validation Set
    C45Model->>C45Model: 42. Calculate Accuracy Metrics
    C45Model->>C45Model: 43. Generate Confusion Matrix
    C45Model->>C45Model: 44. Calculate Precision, Recall, F1-Score

    alt Model Performance Below Threshold
        C45Model->>C45Model: 45. Adjust Hyperparameters
        C45Model->>C45Model: 46. Retrain with Different Settings
        Note over C45Model: Retry training with adjusted parameters
    end

    %% Model Persistence
    Note over C45Model, Database: 💾 Model Storage & Finalization
    C45Model->>C45Model: 47. Serialize Trained Model
    C45Model->>C45Model: 48. Generate Model Metadata
    C45Model->>Database: 49. Store Model Performance Metrics
    Database-->>C45Model: 50. Storage Confirmation

    %% Tree Visualization Generation
    C45Model->>C45Model: 51. Generate Decision Tree Visualization
    C45Model->>C45Model: 52. Export Tree to PNG/DOT Format
    C45Model->>Database: 53. Store Visualization File Path
    Database-->>C45Model: 54. File Storage Confirmation

    %% Training Completion
    Note over PrediksiController, Frontend: ✅ Training Success Response
    C45Model-->>PrediksiController: 55. Training Completed Successfully
    PrediksiController->>PrediksiController: 56. Format Training Results
    
    PrediksiController-->>Frontend: 57. Training Success Response (200 OK)
    Frontend->>Frontend: 58. Process Training Results
    Frontend-->>User: 59. Display Training Success

    %% Background Model Updates
    Note over Database, C45Model: 📊 Background Analytics Processing
    rect rgb(240, 248, 255)
        Note over Database: Background Process (Async)
        Database->>Database: 60. Update Model Statistics
        Database->>Database: 61. Update Training History
        C45Model->>Database: 62. Update Feature Importance
        Database->>Database: 63. Generate Performance Reports
    end

    %% Error Handling Scenarios
    Note over User, Database: ❌ Error Handling Scenarios
    rect rgb(255, 248, 248)
        Note over PrediksiController: Error Scenarios
        alt Database Connection Error
            Database-->>SiswaRepository: Connection Failed
            SiswaRepository-->>PrediksiController: Database Error
            PrediksiController-->>Frontend: 500 Internal Server Error
        end
        
        alt Model Training Error
            C45Model-->>PrediksiController: Training Failed
            PrediksiController-->>Frontend: 500 Internal Server Error
        end
        
        alt Authorization Failed
            AuthService-->>PrediksiController: Access Denied
            PrediksiController-->>Frontend: 403 Forbidden
        end
    end

    %% Performance Metrics Summary
    Note over User, Database: 📊 Performance Metrics & System Status
    Note right of C45Model: • Training time: <30 seconds<br/>• Model accuracy: >80%<br/>• Features: 3 (rata_rata, kategori_penghasilan, kategori_kehadiran)<br/>• Algorithm: C4.5 Decision Tree<br/>• Min training samples: 30+
    Note right of PrediksiController: • Data collection: <5 seconds<br/>• Feature engineering: <2 seconds<br/>• Model validation: <3 seconds<br/>• Response generation: <1 second<br/>• Total training time: <30 seconds
    Note right of Database: • FastAPI routing: Direct controller access<br/>• Authentication: Bearer token validation<br/>• Data storage: PostgreSQL with SQLAlchemy<br/>• Model persistence: Pickle serialization<br/>• Visualization: PNG/DOT export 