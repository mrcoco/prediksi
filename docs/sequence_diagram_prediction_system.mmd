sequenceDiagram
    participant User as 👤 User
    participant Frontend as 🖥️ Frontend
    participant AuthMiddleware as 🔐 Auth Middleware
    participant PrediksiController as 🎯 Prediksi Controller
    participant AuthService as 🔑 Auth Service
    participant SiswaRepository as 👨‍🎓 Siswa Repository
    participant NilaiRepository as 📊 Nilai Repository
    participant PresensiRepository as 📅 Presensi Repository
    participant PenghasilanRepository as 💰 Penghasilan Repository
    participant C45Model as 🧠 C4.5 Model
    participant PrestasiRepository as 📋 Prestasi Repository
    participant Database as 💾 Database

    %% Authentication & Request Initiation
    Note over User, Database: 🔐 Authentication & Request Validation
    User->>Frontend: 1. Request Individual Prediction
    Frontend->>AuthMiddleware: 2. POST /api/prediksi/
    AuthMiddleware->>AuthService: 3. Validate Bearer Token
    AuthService->>Database: 4. Verify User Session
    Database-->>AuthService: 5. Session Valid
    AuthService-->>AuthMiddleware: 6. User Authenticated
    AuthMiddleware->>PrediksiController: 7. Route to Controller

    %% Authorization Check
    Note over PrediksiController, Database: 👥 Authorization & Permission Check
    PrediksiController->>AuthService: 8. Check User Permissions
    AuthService->>Database: 9. Verify User Role & Access
    Database-->>AuthService: 10. Permission Granted
    AuthService-->>PrediksiController: 11. Authorization Success

    %% Student Data Validation
    Note over PrediksiController, Database: 👨‍🎓 Student Data Validation
    PrediksiController->>SiswaRepository: 12. Find Student by ID
    SiswaRepository->>Database: 13. SELECT * FROM siswa WHERE id = ?
    Database-->>SiswaRepository: 14. Student Data
    SiswaRepository-->>PrediksiController: 15. Student Found

    alt Student Not Found
        SiswaRepository-->>PrediksiController: Student Not Found
        PrediksiController-->>Frontend: 404 Not Found
        Frontend-->>User: Student Not Found
    end

    %% Feature Data Collection
    Note over PrediksiController, Database: 📊 Feature Data Collection
    
    %% Academic Scores (Nilai Raport)
    PrediksiController->>NilaiRepository: 16. Get Nilai by Semester & Tahun Ajaran
    NilaiRepository->>Database: 17. SELECT * FROM nilai_raport WHERE siswa_id = ? AND semester = ? AND tahun_ajaran = ?
    Database-->>NilaiRepository: 18. Nilai Data
    NilaiRepository-->>PrediksiController: 19. Academic Scores (rata_rata)

    %% Attendance Data (Presensi)
    PrediksiController->>PresensiRepository: 20. Get Presensi by Semester & Tahun Ajaran
    PresensiRepository->>Database: 21. SELECT * FROM presensi WHERE siswa_id = ? AND semester = ? AND tahun_ajaran = ?
    Database-->>PresensiRepository: 22. Attendance Data
    PresensiRepository-->>PrediksiController: 23. Attendance Records (kategori_kehadiran)

    %% Parent Income Data (Penghasilan Ortu)
    PrediksiController->>PenghasilanRepository: 24. Get Penghasilan Ortu
    PenghasilanRepository->>Database: 25. SELECT * FROM penghasilan_ortu WHERE siswa_id = ?
    Database-->>PenghasilanRepository: 26. Income Data
    PenghasilanRepository-->>PrediksiController: 27. Parent Income Info (kategori_penghasilan)

    %% Data Completeness Check
    Note over PrediksiController, C45Model: 🔍 Data Completeness Validation
    PrediksiController->>PrediksiController: 28. Validate Required Data
    
    alt Missing Required Data
        PrediksiController-->>Frontend: 404 Not Found (Missing Data)
        Frontend-->>User: Required Data Not Found
    end

    %% Model Training Check
    Note over PrediksiController, C45Model: 🤖 Model Training Validation
    PrediksiController->>C45Model: 29. Check if Model is Trained
    C45Model->>C45Model: 30. Validate Model State
    
    alt Model Not Trained
        C45Model->>Database: 31. Load Training Data
        Database-->>C45Model: 32. Training Dataset
        C45Model->>C45Model: 33. Train C4.5 Model
        Note over C45Model: Calculate Entropy, Information Gain, Gain Ratio
        C45Model->>C45Model: 34. Build Decision Tree
        C45Model->>C45Model: 35. Validate Model Performance
        C45Model-->>PrediksiController: 36. Model Ready
    else Model Already Trained
        C45Model-->>PrediksiController: Model Ready
    end

    alt Training Failed (Insufficient Data)
        C45Model-->>PrediksiController: Training Error - Data berlabel tidak cukup
        PrediksiController-->>Frontend: 400 Bad Request
        Frontend-->>User: Insufficient Training Data
    end

    %% Feature Preparation
    Note over PrediksiController, C45Model: 🔧 Feature Preparation for Prediction
    PrediksiController->>PrediksiController: 37. Prepare Prediction Data
    Note over PrediksiController: prediction_data = {<br/>'rata_rata': nilai.rata_rata,<br/>'kategori_penghasilan': penghasilan.kategori_penghasilan,<br/>'kategori_kehadiran': presensi.kategori_kehadiran<br/>}

    %% Execute C4.5 Prediction
    Note over C45Model, Database: 🎯 C4.5 Decision Tree Prediction
    PrediksiController->>C45Model: 38. Execute Prediction
    C45Model->>C45Model: 39. Apply Decision Tree Rules
    C45Model->>C45Model: 40. Calculate Confidence Score
    C45Model->>C45Model: 41. Generate Feature Importances
    C45Model-->>PrediksiController: 42. Prediction Result

    %% Result Processing & Storage
    Note over PrediksiController, Database: 📋 Result Processing & Storage
    PrediksiController->>PrediksiController: 43. Process Prediction Result
    PrediksiController->>PrestasiRepository: 44. Check Existing Prediction
    PrestasiRepository->>Database: 45. SELECT * FROM prestasi WHERE siswa_id = ? AND semester = ? AND tahun_ajaran = ?
    Database-->>PrestasiRepository: 46. Existing Record Check
    PrestasiRepository-->>PrediksiController: 47. Existing Status

    alt Update Existing Prediction
        PrediksiController->>PrestasiRepository: 48. Update Prediction
        PrestasiRepository->>Database: 49. UPDATE prestasi SET prediksi_prestasi = ?, confidence = ?, updated_at = NOW()
        Database-->>PrestasiRepository: 50. Update Success
        PrestasiRepository-->>PrediksiController: 51. Update Confirmation
    else Create New Prediction
        PrediksiController->>PrestasiRepository: 52. Create New Prediction
        PrestasiRepository->>Database: 53. INSERT INTO prestasi (siswa_id, semester, tahun_ajaran, prediksi_prestasi, confidence)
        Database-->>PrestasiRepository: 54. Insert Success
        PrestasiRepository-->>PrediksiController: 55. Create Confirmation
    end

    %% Response Preparation
    Note over PrediksiController, Frontend: 📤 Response Preparation & Delivery
    PrediksiController->>PrediksiController: 56. Format Response Data
    Note over PrediksiController: response = {<br/>'siswa_id': request.siswa_id,<br/>'nama_siswa': siswa.nama,<br/>'prediksi_prestasi': result['prediksi'],<br/>'confidence': result['confidence'],<br/>'detail_faktor': {...}<br/>}
    
    PrediksiController-->>Frontend: 57. Prediction Response (200 OK)

    %% Frontend Processing
    Frontend->>Frontend: 58. Process Prediction Data
    Frontend->>Frontend: 59. Format for Display
    Frontend-->>User: 60. Display Prediction Result

    %% Background Analytics Update
    Note over Database, C45Model: 📊 Background Analytics Processing
    rect rgb(240, 248, 255)
        Note over Database: Background Process (Async)
        Database->>Database: 61. Update Daily Statistics
        Database->>Database: 62. Update Model Usage Metrics
        C45Model->>Database: 63. Update Feature Importance Stats
        Database->>Database: 64. Generate Analytics Summary
    end

    %% Error Handling Flow (Alternative)
    Note over User, Database: ❌ Error Handling Scenarios
    rect rgb(255, 248, 248)
        Note over PrediksiController: Error Scenarios
        alt Database Connection Error
            Database-->>PrestasiRepository: Connection Failed
            PrestasiRepository-->>PrediksiController: Database Error
            PrediksiController-->>Frontend: 500 Internal Server Error
        end
        
        alt C4.5 Model Error
            C45Model-->>PrediksiController: Model Prediction Error
            PrediksiController-->>Frontend: 500 Internal Server Error
        end
        
        alt Rate Limit Exceeded
            AuthMiddleware-->>Frontend: 429 Too Many Requests
        end
        
        alt Authorization Failed
            AuthService-->>PrediksiController: Access Denied
            PrediksiController-->>Frontend: 403 Forbidden
        end
    end

    %% Performance Metrics Summary
    Note over User, Database: 📊 Performance Metrics & System Status
    Note right of PrediksiController: • Request processing: <3 seconds<br/>• Model training: <30 seconds<br/>• Feature extraction: <500ms<br/>• C4.5 prediction: <200ms<br/>• Database operations: <100ms
    Note right of C45Model: • Prediction accuracy: >80%<br/>• Confidence threshold: >70%<br/>• Features: 3 (rata_rata, kategori_penghasilan, kategori_kehadiran)<br/>• Algorithm: C4.5 Decision Tree<br/>• Training data: Minimum 30+ samples
    Note right of Database: • FastAPI routing: Direct controller access<br/>• Authentication: Bearer token validation<br/>• CORS: Enabled for cross-origin requests<br/>• API Documentation: Swagger UI available<br/>• Database: PostgreSQL with SQLAlchemy 