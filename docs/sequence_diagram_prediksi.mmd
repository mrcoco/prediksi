sequenceDiagram
    participant U as User
    participant F as Frontend (Dashboard)
    participant A as Backend API
    participant D as Database
    participant M as C45 Model
    participant S as Siswa Table
    participant N as NilaiRaport Table
    participant P as Presensi Table
    participant PO as PenghasilanOrtu Table
    participant PR as Prestasi Table

    Note over U,PR: Sequence Diagram - Manajemen Prediksi Prestasi Siswa

    %% Train Model
    rect rgb(240, 248, 255)
        Note over U,PR: 1. TRAIN MODEL (Melatih Model C4.5)
        
        U->>F: Click "Train Model" button
        F->>U: Show loading state "Melatih..."
        
        F->>A: POST /api/prediksi/train<br/>Bearer Token
        
        Note over A: Authentication Check
        A->>A: Validate Bearer Token<br/>Extract current_user
        
        Note over A: Model Training Process
        A->>M: c45_model.train(db)
        
        Note over M: Data Preparation
        M->>D: SELECT siswa.*, nilai.*, presensi.*, penghasilan.*<br/>FROM siswa<br/>JOIN nilai_raport ON siswa.id = nilai.siswa_id<br/>JOIN presensi ON siswa.id = presensi.siswa_id<br/>JOIN penghasilan_ortu ON siswa.id = penghasilan.siswa_id
        D-->>M: Return complete dataset for training
        
        Note over M: Feature Engineering
        M->>M: Extract features:<br/>- rata_rata (from nilai)<br/>- kategori_penghasilan (from penghasilan)<br/>- kategori_kehadiran (from presensi)
        M->>M: Generate labels using business rules:<br/>IF rata_rata >= 85 AND kategori_penghasilan = 'Tinggi'<br/>AND kategori_kehadiran = 'Tinggi' THEN 'Tinggi'<br/>ELIF rata_rata >= 75 AND kategori_kehadiran = 'Tinggi'<br/>THEN 'Sedang' ELSE 'Rendah'
        
        Note over M: Model Training
        M->>M: Encode categorical features:<br/>kategori_penghasilan: {Rendah:0, Menengah:1, Tinggi:2}<br/>kategori_kehadiran: {Rendah:0, Sedang:1, Tinggi:2}
        M->>M: Split data: 80% training, 20% testing
        M->>M: Train DecisionTreeClassifier with entropy criterion
        M->>M: Evaluate model: accuracy, classification_report
        M->>M: Generate tree visualization (PNG format)
        M->>M: Set trained = True
        
        M-->>A: Return training results:<br/>{accuracy, classification_report, training_samples}
        
        A-->>F: HTTP 200 - Training completed with metrics
        F->>F: Hide loading state
        F->>F: Update UI with training results
        F-->>U: Show success notification:<br/>"Model berhasil dilatih dengan akurasi XX%"
        F->>F: Load tree visualization
        F->>F: Load model metrics
    end

    %% Single Prediction
    rect rgb(240, 255, 240)
        Note over U,PR: 2. SINGLE PREDICTION (Prediksi Individual)
        
        U->>F: Navigate to Prediksi page
        F->>U: Show prediction form with dropdowns:<br/>- siswa_id (dropdown)<br/>- semester, tahun_ajaran
        
        U->>F: Select siswa and fill form data
        U->>F: Click "Prediksi" button
        
        F->>A: POST /api/prediksi/<br/>Bearer Token + PrediksiRequest
        
        Note over A: Authentication & Validation
        A->>A: Validate Bearer Token<br/>Extract current_user
        
        Note over A: Data Validation - Siswa
        A->>S: SELECT * FROM siswa WHERE id = siswa_id
        S-->>A: Return siswa data or null
        
        alt Siswa tidak ditemukan
            A-->>F: HTTP 404<br/>"Siswa dengan ID tidak ditemukan"
            F-->>U: Show error notification
        else Siswa valid
            Note over A: Data Validation - Nilai Raport
            A->>N: SELECT * FROM nilai_raport<br/>WHERE siswa_id = ? AND semester = ?<br/>AND tahun_ajaran = ?
            N-->>A: Return nilai data or null
            
            alt Nilai tidak ditemukan
                A-->>F: HTTP 404<br/>"Data nilai tidak ditemukan untuk semester ini"
                F-->>U: Show error notification
            else Nilai valid
                Note over A: Data Validation - Presensi
                A->>P: SELECT * FROM presensi<br/>WHERE siswa_id = ? AND semester = ?<br/>AND tahun_ajaran = ?
                P-->>A: Return presensi data or null
                
                alt Presensi tidak ditemukan
                    A-->>F: HTTP 404<br/>"Data presensi tidak ditemukan untuk semester ini"
                    F-->>U: Show error notification
                else Presensi valid
                    Note over A: Data Validation - Penghasilan Ortu
                    A->>PO: SELECT * FROM penghasilan_ortu<br/>WHERE siswa_id = ?
                    PO-->>A: Return penghasilan data or null
                    
                    alt Penghasilan tidak ditemukan
                        A-->>F: HTTP 404<br/>"Data penghasilan orang tua tidak ditemukan"
                        F-->>U: Show error notification
                    else Data lengkap
                        Note over A: Model Check & Auto-Train
                        alt Model belum dilatih
                            A->>M: Check c45_model.trained
                            M-->>A: Return False
                            A->>M: c45_model.train(db)
                            M-->>A: Auto-training completed
                        end
                        
                        Note over A: Prediction Process
                        A->>A: Prepare prediction_data:<br/>{rata_rata: nilai.rata_rata,<br/>kategori_penghasilan: penghasilan.kategori_penghasilan,<br/>kategori_kehadiran: presensi.kategori_kehadiran}
                        
                        A->>M: c45_model.predict(prediction_data)
                        
                        Note over M: Model Prediction
                        M->>M: Validate input features
                        M->>M: Convert categorical to numeric:<br/>kategori_penghasilan: {Rendah:0, Menengah:1, Tinggi:2}<br/>kategori_kehadiran: {Rendah:0, Sedang:1, Tinggi:2}
                        M->>M: Create DataFrame with features
                        M->>M: model.predict(X_pred) -> prediction
                        M->>M: model.predict_proba(X_pred) -> confidence
                        M->>M: Get feature_importances from model
                        
                        M-->>A: Return prediction result:<br/>{prediksi, confidence, feature_importances}
                        
                        Note over A: Save Prediction Result
                        A->>PR: Check existing prediction:<br/>SELECT * FROM prestasi<br/>WHERE siswa_id = ? AND semester = ?<br/>AND tahun_ajaran = ?
                        PR-->>A: Return existing record or null
                        
                        alt Prediction exists
                            A->>PR: UPDATE prestasi SET<br/>prediksi_prestasi = ?, confidence = ?,<br/>updated_at = CURRENT_TIMESTAMP<br/>WHERE id = ?
                        else New prediction
                            A->>PR: INSERT INTO prestasi<br/>(siswa_id, semester, tahun_ajaran,<br/>prediksi_prestasi, confidence)
                        end
                        
                        Note over A: Prepare Response
                        A->>A: Build comprehensive response:<br/>{siswa_id, nama_siswa, prediksi_prestasi,<br/>confidence, detail_faktor}
                        
                        A-->>F: HTTP 200 - Prediction result with details
                        F->>F: Display prediction results:<br/>- Prediksi Prestasi<br/>- Confidence Level<br/>- Detail Faktor (nilai, kehadiran, penghasilan)<br/>- Feature Importances
                        F-->>U: Show prediction results with visual indicators
                    end
                end
            end
        end
    end 