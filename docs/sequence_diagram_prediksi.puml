@startuml Sequence_Diagram_Prediksi
!theme plain
skinparam backgroundColor #FFFFFF
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxmessagesize 60

title Sequence Diagram - Manajemen Prediksi Prestasi Siswa\\nSistem EduPro

participant "User" as U
participant "Frontend\\n(Dashboard)" as F
participant "Backend API\\n(/api/prediksi)" as A
participant "Database" as D
participant "C45 Model" as M
participant "Siswa Table" as S
participant "NilaiRaport Table" as N
participant "Presensi Table" as P
participant "PenghasilanOrtu Table" as PO
participant "Prestasi Table" as PR

== 1. TRAIN MODEL (Melatih Model C4.5) ==

U -> F: Click "Train Model" button
F -> U: Show loading state "Melatih..."

F -> A: POST /api/prediksi/train\\nBearer Token

note over A: Authentication Check
A -> A: Validate Bearer Token\\nExtract current_user

note over A: Model Training Process
A -> M: c45_model.train(db)

note over M: Data Preparation
M -> D: SELECT siswa.*, nilai.*, presensi.*, penghasilan.*\\nFROM siswa\\nJOIN nilai_raport ON siswa.id = nilai.siswa_id\\nJOIN presensi ON siswa.id = presensi.siswa_id\\nJOIN penghasilan_ortu ON siswa.id = penghasilan.siswa_id
D --> M: Return complete dataset for training

note over M: Feature Engineering
M -> M: Extract features:\\n- rata_rata (from nilai)\\n- kategori_penghasilan (from penghasilan)\\n- kategori_kehadiran (from presensi)
M -> M: Generate labels using business rules:\\nIF rata_rata >= 85 AND kategori_penghasilan = 'Tinggi'\\nAND kategori_kehadiran = 'Tinggi' THEN 'Tinggi'\\nELIF rata_rata >= 75 AND kategori_kehadiran = 'Tinggi'\\nTHEN 'Sedang' ELSE 'Rendah'

note over M: Model Training
M -> M: Encode categorical features:\\nkategori_penghasilan: {Rendah:0, Menengah:1, Tinggi:2}\\nkategori_kehadiran: {Rendah:0, Sedang:1, Tinggi:2}
M -> M: Split data: 80% training, 20% testing
M -> M: Train DecisionTreeClassifier with entropy criterion
M -> M: Evaluate model: accuracy, classification_report
M -> M: Generate tree visualization (PNG format)
M -> M: Set trained = True

M --> A: Return training results:\\n{accuracy, classification_report, training_samples}

A --> F: HTTP 200 - Training completed with metrics
F -> F: Hide loading state
F -> F: Update UI with training results
F --> U: Show success notification:\\n"Model berhasil dilatih dengan akurasi XX%"
F -> F: Load tree visualization
F -> F: Load model metrics

== 2. SINGLE PREDICTION (Prediksi Individual) ==

U -> F: Navigate to Prediksi page
F -> U: Show prediction form with dropdowns:\\n- siswa_id (dropdown)\\n- semester, tahun_ajaran

U -> F: Select siswa and fill form data
U -> F: Click "Prediksi" button

F -> A: POST /api/prediksi/\\nBearer Token + PrediksiRequest

note over A: Authentication & Validation
A -> A: Validate Bearer Token\\nExtract current_user

note over A: Data Validation - Siswa
A -> S: SELECT * FROM siswa WHERE id = siswa_id
S --> A: Return siswa data or null

alt Siswa tidak ditemukan
    A --> F: HTTP 404\\n"Siswa dengan ID tidak ditemukan"
    F --> U: Show error notification
else Siswa valid
    note over A: Data Validation - Nilai Raport
    A -> N: SELECT * FROM nilai_raport\\nWHERE siswa_id = ? AND semester = ?\\nAND tahun_ajaran = ?
    N --> A: Return nilai data or null
    
    alt Nilai tidak ditemukan
        A --> F: HTTP 404\\n"Data nilai tidak ditemukan untuk semester ini"
        F --> U: Show error notification
    else Nilai valid
        note over A: Data Validation - Presensi
        A -> P: SELECT * FROM presensi\\nWHERE siswa_id = ? AND semester = ?\\nAND tahun_ajaran = ?
        P --> A: Return presensi data or null
        
        alt Presensi tidak ditemukan
            A --> F: HTTP 404\\n"Data presensi tidak ditemukan untuk semester ini"
            F --> U: Show error notification
        else Presensi valid
            note over A: Data Validation - Penghasilan Ortu
            A -> PO: SELECT * FROM penghasilan_ortu\\nWHERE siswa_id = ?
            PO --> A: Return penghasilan data or null
            
            alt Penghasilan tidak ditemukan
                A --> F: HTTP 404\\n"Data penghasilan orang tua tidak ditemukan"
                F --> U: Show error notification
            else Data lengkap
                note over A: Model Check & Auto-Train
                alt Model belum dilatih
                    A -> M: Check c45_model.trained
                    M --> A: Return False
                    A -> M: c45_model.train(db)
                    M --> A: Auto-training completed
                end
                
                note over A: Prediction Process
                A -> A: Prepare prediction_data:\\n{rata_rata: nilai.rata_rata,\\nkategori_penghasilan: penghasilan.kategori_penghasilan,\\nkategori_kehadiran: presensi.kategori_kehadiran}
                
                A -> M: c45_model.predict(prediction_data)
                
                note over M: Model Prediction
                M -> M: Validate input features
                M -> M: Convert categorical to numeric:\\nkategori_penghasilan: {Rendah:0, Menengah:1, Tinggi:2}\\nkategori_kehadiran: {Rendah:0, Sedang:1, Tinggi:2}
                M -> M: Create DataFrame with features
                M -> M: model.predict(X_pred) -> prediction
                M -> M: model.predict_proba(X_pred) -> confidence
                M -> M: Get feature_importances from model
                
                M --> A: Return prediction result:\\n{prediksi, confidence, feature_importances}
                
                note over A: Save Prediction Result
                A -> PR: Check existing prediction:\\nSELECT * FROM prestasi\\nWHERE siswa_id = ? AND semester = ?\\nAND tahun_ajaran = ?
                PR --> A: Return existing record or null
                
                alt Prediction exists
                    A -> PR: UPDATE prestasi SET\\nprediksi_prestasi = ?, confidence = ?,\\nupdated_at = CURRENT_TIMESTAMP\\nWHERE id = ?
                else New prediction
                    A -> PR: INSERT INTO prestasi\\n(siswa_id, semester, tahun_ajaran,\\nprediksi_prestasi, confidence)
                end
                
                note over A: Prepare Response
                A -> A: Build comprehensive response:\\n{siswa_id, nama_siswa, prediksi_prestasi,\\nconfidence, detail_faktor}
                
                A --> F: HTTP 200 - Prediction result with details
                F -> F: Display prediction results:\\n- Prediksi Prestasi\\n- Confidence Level\\n- Detail Faktor (nilai, kehadiran, penghasilan)\\n- Feature Importances
                F --> U: Show prediction results with visual indicators
            end
        end
    end
end

@enduml 